# Author：Mike# date：2019/11/29import sysimport pygamefrom bullet import Bulletdef check_keydown_events(event, ai_settings, screen, ship, bullets):    if event.key == pygame.K_RIGHT:  # 如果发生了按下键盘右键的事件        # 向右移动一格飞船        ship.moving_right = True    elif event.key == pygame.K_LEFT:  # 如果发生了按下键盘左键的事件        # 向左移动一格飞船        ship.moving_left = True    elif event.key == pygame.K_SPACE:  # 如果发生了按下空格按键的事件        # 创建一个子弹,并将其加入编组bullet中        new_bullet = Bullet(ai_settings, screen, ship)        bullets.add(new_bullet)def check_keyup_events(event, ship):    # 向右一直移动飞船    if event.key == pygame.K_RIGHT:        ship.moving_right = False    # 向左一直移动飞船    elif event.key == pygame.K_LEFT:        ship.moving_left = Falsedef check_events(ai_settings, screen, ship, bullets):    """响应鼠标和键盘事件"""    # 监视鼠标事件,利用死循环保持实时监视    for event in pygame.event.get():        # 如果鼠标点击X按钮则退出游戏        if event.type == pygame.QUIT:            sys.exit()        # 监控键盘信息,如果发生键盘按下则处理        elif event.type == pygame.KEYDOWN:            check_keydown_events(event, ai_settings,screen, ship, bullets)        # 监控键盘信息,如果发生键盘放开则处理        elif event.type == pygame.KEYUP:            check_keyup_events(event, ship)def update_screen(ai_settings, screen, ship, bullets):    """更新屏幕上的图像, 并切换到新屏幕"""    # 每次循环都重绘屏幕    screen.fill(ai_settings.bg_color)    # 指定位置画一个飞船    ship.blitme()    # 拖放屏幕时,绘制新屏幕,同时擦掉就屏幕,看起来,鼠标拖拽屏幕移动    pygame.display.flip()    # 在飞船和外星人后重绘所有子弹    for bullet in bullets.sprites():        bullet.draw_bullet()